*********************************************************************************************************************************
All Paths From Source to Target

Solution
Given a directed acyclic graph of N nodes. Find all possible paths from node 0 to node N-1, and return them in any order.

The graph is given as follows:  the nodes are 0, 1, ..., graph.length - 1.  graph[i] is a list of all nodes j for which the
edge (i, j) exists.

Example:
Input: [[1,2],[3],[3],[]]
Output: [[0,1,3],[0,2,3]]
Explanation: The graph looks like this:
0--->1
|    |
v    v
2--->3
There are two paths: 0 -> 1 -> 3 and 0 -> 2 -> 3.
 

Constraints:

The number of nodes in the graph will be in the range [2, 15].
You can print different paths in any order, but you should keep the order of nodes inside one path.
*************************************************************************************************************************************
void dfs(vector<vector<int> >&g,int s,int d,vector<vector<int> >&ans,vector<int> &path){
        if(s==d){
            path.push_back(d);
            ans.push_back(path);
            path.pop_back();
            return ;
        }
        for(int i=0;i<g[s].size();++i){
            path.push_back(s);
            dfs(g,g[s][i],d,ans,path);
            path.pop_back();
        }
        return ;
    }
    vector<vector<int>> allPathsSourceTarget(vector<vector<int>>& v) {
        int n=v.size();
        vector<int> path;
        vector<vector<int> >ans;
        dfs(v,0,n-1,ans,path);
        return ans;
    }
