************************************************************************************************************
Construct Binary Tree from Inorder and Postorder Traversal

Solution
Given inorder and postorder traversal of a tree, construct the binary tree.

Note:
You may assume that duplicates do not exist in the tree.

For example, given

inorder = [9,3,15,20,7]
postorder = [9,15,7,20,3]
Return the following binary tree:

    3
   / \
  9  20
    /  \
   15   7
*********************************************************************************************************

* Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    TreeNode* buildTreeHelper(vector& inorder, vector& postorder, int s, int e, int i){
        if(s>e){
            return NULL;
        }
        TreeNode* root= new TreeNode(postorder[i]);
        int index=-1;
        for(int j=s; sright= buildTreeHelper(inorder, postorder, index+1, e, i-1);
        root->left= buildTreeHelper(inorder, postorder, s, index-1, i-(e-index)-1);
        return root;
    }
public:
    TreeNode* buildTree(vector& inorder, vector& postorder) {
        int size= inorder.size();
        if(size==0){
            return NULL;
        }
        TreeNode* root= buildTreeHelper(inorder, postorder, 0, size-1, size-1);
        return root;
    }
};
