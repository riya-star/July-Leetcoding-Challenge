********************************************************************************************************************
Course Schedule II

Solution
There are a total of n courses you have to take, labeled from 0 to n-1.

Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]

Given the total number of courses and a list of prerequisite pairs, return the ordering of courses you should take to finish all courses.

There may be multiple correct orders, you just need to return one of them. If it is impossible to finish all courses, return an empty array.

Example 1:

Input: 2, [[1,0]] 
Output: [0,1]
Explanation: There are a total of 2 courses to take. To take course 1 you should have finished   
             course 0. So the correct course order is [0,1] .
Example 2:

Input: 4, [[1,0],[2,0],[3,1],[3,2]]
Output: [0,1,2,3] or [0,2,1,3]
Explanation: There are a total of 4 courses to take. To take course 3 you should have finished both     
             courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0. 
             So one correct course order is [0,1,2,3]. Another correct ordering is [0,2,1,3] .
Note:

The input prerequisites is a graph represented by a list of edges, not adjacency matrices. Read more about how a graph is represented.
You may assume that there are no duplicate edges in the input prerequisites.
**************************************************************************************************************************************

vector<int> findOrder(int numCourses, vector<vector<int>>& prereq) {
        // We simply have to return the topologically sorted order in a vector
        // If the order is not possible, then return an empty vector
        
        //Construction of the graph (adjacency list)
        //Construction of an indegree array, along with the graph
        vector<vector<int>> graph(numCourses);
        vector<int> indegree(numCourses);
        
        for(int i=0; i<prereq.size(); i++){
            graph[prereq[i][1]].push_back(prereq[i][0]);
            indegree[prereq[i][0]]++;
        }
        
        //Now let's sort the graph topologically and return the result in a vector
        //We can use a queue data structure as the requirement is FIFO
        
        vector<int> res;
        queue<int> q;
        
        //We will begin with all the courses having indegree 0
        for(int i=0; i<indegree.size(); i++)
            if(indegree[i]==0) q.push(i);
       
        while(!q.empty()){
            
            //Pop the courses with indegree 0 and then push the courses which now have an indegree of 0 after removal of the previous courses with indegree 0
            int curr = q.front();
            res.push_back(curr);
            q.pop();
            
            for(int i=0; i<graph[curr].size(); i++){
                indegree[graph[curr][i]]--;
                
                if(indegree[graph[curr][i]]==0)
                    q.push(graph[curr][i]);
            }
        }
        
        if(res.size() == numCourses)
            return res;
        
        return {};
    }
