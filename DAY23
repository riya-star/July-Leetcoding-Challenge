*******************************************************************************************************************
Single Number III

Solution
Given an array of numbers nums, in which exactly two elements appear only once and all the other elements appear
exactly twice. Find the two elements that appear only once.

Example:

Input:  [1,2,1,3,2,5]
Output: [3,5]
Note:

The order of the result is not important. So in the above example, [5, 3] is also correct.
Your algorithm should run in linear runtime complexity. Could you implement it using only constant space complexity?

********************************************************************************************************************

class Solution {
public:
    vector<int> singleNumber(vector<int>& nums) {
        // With bit manipulation.
        // 1) get sum of two non-repeating elements.
        int sum = accumulate(nums.begin(), nums.end(), 0, bit_xor<int>());
        // 2) get first rightmost set-bit and set everything else to zero. this is where the two-numbers start to differ.
        sum &= -sum;
        // 3) separate the bits into two parts. all duplicate nums will cancel out with XOR operation. 
        vector<int> result = {0, 0};
        for (auto &num : nums) {
            if ((num & sum) == 0) result[0] ^= num;   // not set.
            else result[1] ^= num;  // bit is set.
        }
        return result;
    }
};
