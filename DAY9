***********************************************************************************************************************************
Maximum Width of Binary Tree

Solution
Given a binary tree, write a function to get the maximum width of the given tree. The maximum width of a tree is the maximum width among all levels.

The width of one level is defined as the length between the end-nodes (the leftmost and right most non-null nodes in the level, where the null nodes between the end-nodes are also counted into the length calculation.

It is guaranteed that the answer will in the range of 32-bit signed integer.

Example 1:

Input: 

           1
         /   \
        3     2
       / \     \  
      5   3     9 

Output: 4
Explanation: The maximum width existing in the third level with the length 4 (5,3,null,9).
Example 2:

Input: 

          1
         /  
        3    
       / \       
      5   3     

Output: 2
Explanation: The maximum width existing in the third level with the length 2 (5,3).
Example 3:

Input: 

          1
         / \
        3   2 
       /        
      5      

Output: 2
Explanation: The maximum width existing in the second level with the length 2 (3,2).
Example 4:

Input: 

          1
         / \
        3   2
       /     \  
      5       9 
     /         \
    6           7
Output: 8
Explanation:The maximum width existing in the fourth level with the length 8 (6,null,null,null,null,null,null,7).
***********************************************************************************************************************************
class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        queue<pair<TreeNode*,unsigned long long>> q;
        if(!root)
            return 0;
        q.push({root,0});
        unsigned long long ret=0;
        while(!q.empty())
        {
            auto fir=q.front();
            int si=q.size();
            auto curr=q.front();
            for(int i=0;i<si;i++)
            {
                curr=q.front();
                unsigned long long ind=curr.second;
                q.pop();
                if(curr.first->left)
                    q.push({curr.first->left,2*ind});
                if(curr.first->right)
                    q.push({curr.first->right,2*ind+1});
            }
            ret=max(ret,curr.second-fir.second+1);
        }
        return ret;;
    }
};
