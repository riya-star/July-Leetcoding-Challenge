********************************************************************************************************************************************************************************************************************************************************************************************************************************************
Flatten a Multilevel Doubly Linked List

You are given a doubly linked list which in addition to the next and previous pointers, it could have a child pointer, which may or may not point to a separate doubly linked list. These child lists may have one or more children of their own, and so on, to produce a multilevel data structure, as shown in the example below.

Flatten the list so that all the nodes appear in a single-level, doubly linked list. You are given the head of the first level of the list.

 

Example 1:

Input: head = [1,2,null,3]
Output: [1,3,2]
Explanation:

The input multilevel linked list is as follows:

  1---2---NULL
  |
  3---NULL
  
Example 2:

Input: head = []
Output: []
 

How multilevel linked list is represented in test case:

We use the multilevel linked list from Example 1 above:

 1---2---3---4---5---6--NULL
         |
         7---8---9---10--NULL
             |
             11--12--NULL
The serialization of each level is as follows:

[1,2,3,4,5,6,null]
[7,8,9,10,null]
[11,12,null]
To serialize all levels together we will add nulls in each level to signify no node connects to the upper node of the previous level. The serialization becomes:

[1,2,3,4,5,6,null]
[null,null,7,8,9,10,null]
[null,11,12,null]
Merging the serialization of each level and removing trailing nulls we obtain:

[1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]
 

Constraints:

Number of Nodes will not exceed 1000.
1 <= Node.val <= 10^5
********************************************************************************************************************************************************************************************************************************************************************************************************************************************
class Solution {
public:
'''

Node* flatten(Node* head) {
    // taking care of the null head
    if(head==NULL) return head;
    stack<Node*> st; //to maintain the branching points
    Node* t = head; Node* temp=NULL; bool flag;
    while(1){
        flag = false;
        if( t->child != NULL){
            if(t->next !=NULL){
                st.push(t->next); //push next only when its not null.
            }
            //take care of the prev and next pointers
            t->child->prev = t;
            t->next = t->child;
            flag = true; t->child = NULL;
        }
        if(flag==false && t->child==NULL && t->next==NULL) break; // finding the last node of last level.
        t=t->next;
    }
    while(!st.empty()){
        if(t->child==NULL && t->next==NULL){
            //taking care of prev and next poinnters
            temp = st.top();
            st.pop();
            temp->prev = t;
            t->next = temp;
        }
        t=t->next;
    }
    return head;
}
};
'''
